name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: MY_AWS_REGION                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: MY_ECR_REPOSITORY           # set this to your Amazon ECR repository name
  ECS_SERVICE: MY_ECS_SERVICE                 # set this to your Amazon ECS service name
  ECS_CLUSTER: MY_ECS_CLUSTER                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: MY_ECS_TASK_DEFINITION # set this to the path to your Amazon ECS task definition file, e.g. .aws/task-definition.json

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push Node.js image to Amazon ECR
      id: build-nodejs-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        NODEJS_IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build and push the Node.js application image to ECR
        docker build -f Dockerfile.nodejs -t $ECR_REGISTRY/$ECR_REPOSITORY-nodejs:$NODEJS_IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY-nodejs:$NODEJS_IMAGE_TAG
        echo "nodejs_image=$ECR_REGISTRY/$ECR_REPOSITORY-nodejs:$NODEJS_IMAGE_TAG" >> $GITHUB_ENV

    - name: Build, tag, and push MongoDB image to Amazon ECR
      id: build-mongodb-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        MONGODB_IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build and push the MongoDB image to ECR
        docker build -f Dockerfile.mongo -t $ECR_REGISTRY/$ECR_REPOSITORY-mongodb:$MONGODB_IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY-mongodb:$MONGODB_IMAGE_TAG
        echo "mongodb_image=$ECR_REGISTRY/$ECR_REPOSITORY-mongodb:$MONGODB_IMAGE_TAG" >> $GITHUB_ENV

    - name: Fill in the new image IDs in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name-nodejs: "nodejs-container"    # Container name for the Node.js app in task definition
        image-nodejs: ${{ steps.build-nodejs-image.outputs.nodejs_image }}
        container-name-mongodb: "mongodb-container"  # Container name for MongoDB in task definition
        image-mongodb: ${{ steps.build-mongodb-image.outputs.mongodb_image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
